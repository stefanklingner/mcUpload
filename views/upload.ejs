<!DOCTYPE html>
<html>
<head lang="en">
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- Bootstrap -->
    <link href="stylesheets/bootstrap.min.css" rel="stylesheet">
    <link href="stylesheets/upload.css" rel="stylesheet">

    <title>Upload</title>
</head>
<body>


<div class="container-fluid">

    <div class="row">

        <div class="col-lg-8 col-lg-offset-1">

            <div data-bind="template: { name: 'uploadTemplate', foreach: selectBoxes, as: 'item'} "></div>

            <div>
                <button class="btn btn-info" data-bind="click: addASelectBox">One more...</button>
                &nbsp;(Add another one before upload)
            </div>

            <div class="marTop20">
                <button class="btn btn-default" data-bind="click: upload">Upload</button>
                <button class="btn btn-default" data-bind="click: reset">Cancel</button>

                <button class="btn btn-default" data-bind="click: progress10">Progress 10%</button>
                <button class="btn btn-default" data-bind="click: resetProgress">Reset Progress</button>
                <button class="btn btn-default" data-bind="click: showSamples">Show Samples</button>

            </div>
        </div>

    </div>
</div>


<script type="text/html" id="uploadTemplate">
    <form data-bind="attr: {id: id}" class="form-horizontal" encType="multipart/form-data" role="form">

        <div class="panel panel-default">
            <div class="panel-body">
                <div class="row">
                    <div class="col-lg-6">
                        <label for="textInput" class="fll marTop5">File&nbsp;</label>

                        <div class="input-group" id="inputGroup">
                            <input id="textInput" type="text" class="form-control"
                                   data-bind="value: filenameShort, click: openFileDlg">
                        <span class="input-group-btn" type="button">
                            <button class="btn btn-default">
                            <span class="glyphicon glyphicon-folder-open"></span>
                            </button>
                        </span>
                            <input type="file" id="fileInput"
                                   data-bind="value: filename, attr : {name: inputName}, event: {change: changeMethod}"
                                   class="hideInput">

                        </div>
                    </div>
                    <div class="col-lg-5 marTop5">
                        <div class="myProgress" data-bind="visible: processed() > 0">
                            <div class="progress-bar" role="progressbar" aria-valuenow="10" aria-valuemin="0"
                                 aria-valuemax="100"
                                 data-bind="style: {width: progress}, html: progressText">
                            </div>
                        </div>
                    </div>
                    <div class="col-lg-1 marTop5">
                        <div data-bind="click: function() {$parent.remove(index)}">
                            <span class="glyphicon glyphicon-remove flr" title="Remove"
                                  data-bind="visible: index > 0"></span>
                        </div>
                    </div>
                </div>

            </div>
        </div>
    </form>
</script>


<script src="js/lib/jquery-2.1.1.min.js"></script>
<script src="js/lib/bootstrap.min.js"></script>
<script src="js/lib/knockout-3.2.0.js"></script>
<script src="js/upload.js"></script>


<script type="text/javascript">

    var boxIndex = 0;

    var tmpProgress = 0;

    function selectBox(index) {
        var self = this;
        this.myForm = undefined;
        self.index = index;
        self.file = undefined;
        self.fileSize = undefined;
        self.inputName = "file" + self.index;

        self.id = ko.computed(function () {
            return "selectBox" + self.index;
        });

        self.changeMethod = function(data, event)
        {
            self.file = event.currentTarget.files[0];
            self.fileSize = event.currentTarget.files[0].size;
            self.myForm = event.target.form;
        };

        self.filename = ko.observable();
        self.speed = ko.observable();
        self.remaining = ko.observable();

        self.filenameShort = ko.pureComputed(function () {
            var n = self.filename();
            if (n != undefined) {
                return n.replace(/^.*[\\\/]/, '');
            }

            return '';
        });

        self.processed = ko.observable(0);

        self.progress = ko.pureComputed(function () {
            return self.processed().toString() + '%';
        });
        self.progressText = ko.computed(function () {
            return self.processed() + '%' + ' completed';
        });

        self.openFileDlg = function () {
            document.getElementById('fileInput').click();
        };

        self.fileSelected = function () {

        }
    }

    function UploadViewModel() {
        var self = this;

        self.selectBoxes = ko.observableArray();
        self.addASelectBox = function () {
            boxIndex++;
            self.selectBoxes.push(new selectBox(boxIndex));
        };

        self.reset = function () {
            tmpProgress = 0;
            self.selectBoxes.removeAll();
            boxIndex = 0;
            self.selectBoxes.push(new selectBox(boxIndex));
        };

        self.upload = function () {
            for (var i = 0; i < self.selectBoxes().length; i++) {

                var vFD = new FormData($(self.selectBoxes()[i].id));

                console.log(self.selectBoxes()[i].filename());
                console.log(self.selectBoxes()[i].index);

            }
        };

        self.remove = function (item) {
            self.selectBoxes.remove(self.selectBoxes()[item]);
            var i = 0;
            for (; i < self.selectBoxes().length; i++) {

                self.selectBoxes()[i].index = i;
            }
            boxIndex = i - 1;
        };

        self.progress10 = function () {
            if (tmpProgress < 100) {
                tmpProgress += 10
            } else {
                tmpProgress = 10
            }

            for (var i = 0; i < self.selectBoxes().length; i++) {

                self.selectBoxes()[i].processed(tmpProgress);
            }
        };

        self.resetProgress = function () {
            tmpProgress = 0;
            for (var i = 0; i < self.selectBoxes().length; i++) {

                self.selectBoxes()[i].processed(0);
            }
        };

        self.upload = function () {

            for (var i = 0; i < self.selectBoxes().length; i++) {

                var u = new Upload(self.selectBoxes()[i]);
                u.startUploading();

            }
        };

        self.showSamples = function () {
            window.location = '/samples';
        }

    }

    var uploadViewModel = new UploadViewModel();
    ko.applyBindings(uploadViewModel);

    uploadViewModel.reset();

</script>


</body>
</html>